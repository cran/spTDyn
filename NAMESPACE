useDynLib(spTDyn, .registration = TRUE)
#useDynLib(spTDyn)
#exportPattern("^[^\\.]")

import(spTimer)
import(coda)
import(sp)
import(spacetime)

importFrom("grDevices", "dev.new")
importFrom("graphics", "abline", "legend", "par", "points", "segments",
     "title")
importFrom("stats", "acf", "as.formula", "contrasts", "density",
     "dist", "is.empty.model", "lm", "median", "model.frame",
     "model.matrix", "model.response", "na.exclude", "na.omit",
     "na.pass", "pacf", "qqline", "qqnorm", "quantile", "sd",
     "terms", "terms.formula", "ts")
importFrom("utils", "read.table")
importFrom("stats", "rnorm")
importFrom("stats", "rgamma")
importFrom("spTimer", "as.forecast.object", 
    "Formula.coords", "Formula.matrix", "formula.spT", "Gamm", "Norm", 
    "spT.decay", "spT.geo.dist", "spT.geo_dist", "spT.geodist",
    "spT.grid.coords", "spT.initials", "spT.pCOVER", "spT.priors",
    "spT.segment.plot", "spT.subset", "spT.time", "spT.validation",
    "Unif")

#S3method(model.frame,spT)
#S3method(model.matrix,spT)
#S3method(as.mcmc,spT)
#S3method(terms,spT)
#S3method(formula,spT)

S3method(print,spTpred)
S3method(print,spTD)
S3method(fitted,spTD)
S3method(coef,spTD)
S3method(residuals,spTD)
S3method(confint,spTD)
S3method(summary,spTD)
S3method(plot,spTD)
S3method(predict,spTD)
S3method(as.mcmc,spTD)

exportClasses("spTD")

export(
       "GibbsDyn",
	   "decay",
	   "def.time",
	   "gridTodata",
	   "initials",
	   "ObsGridData",
	   "ObsGridLoc",
	   "priors",
	   "sp",
	   "tp",
	   "summary.spTD",
	   "plot.spTD",
	   "predict.spTD",
	   "fitted.spTD",
	   "coef.spTD",
	   "confint.spTD",
	   "residuals.spTD",
	   "as.mcmc.spTD"
)